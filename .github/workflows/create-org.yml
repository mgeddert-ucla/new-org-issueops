name: Create new org

on:
  issue_comment:
    types: [created]

jobs:
  create-repo:
    name: Create new org
    runs-on: ubuntu-latest
    if: startsWith(github.event.comment.body, '/create-org') &&
      contains(github.event.issue.labels.*.name, 'new-org')

    steps:
      - name: ApproveOps - Approvals in IssueOps
        uses: joshjohanning/approveops@v1
        id: check-approval
        with:
          app-id: 170284 # The GitHub App ID; ie: 170284
          app-private-key: ${{ secrets.PRIVATE_KEY }} # Private key for the GitHub App that is installed on the repo; e.g.: ${{ secrets.PRIVATE_KEY }}
          team-name: approver-team # The name of the team in GitHub to check for the approval command; e.g.: approver-team
          fail-if-approval-not-found: true # Fail the action (show the action run as red) if the command is not found in the comments from someone in the approver team"

      - uses: stefanbuck/github-issue-parser@v2
        id: issue-parser

      - name: do things
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "new org name = ${{ steps.issue-parser.outputs.issueparser_org_name }}"

          curl -X POST 'https://api.github.com/graphql' \
            -H "Authorization: bearer ${{ secrets.ADMIN_TOKEN }}" \
            --data '{ "query": "mutation ($enterprise_id: ID! $organization_name: String! $admin_logins: [String!]! $billing_email: String!) { createEnterpriseOrganization(input: { enterpriseId: $enterprise_id login: $organization_name billingEmail: $billing_email profileName: $organization_name adminLogins: $admin_logins }) { enterprise { name } organization { id name } } }", "variables":{ "enterprise_id": "MDEwOkVudGVycHJpc2Uy", "organization_name": "${{ steps.issue-parser.outputs.issueparser_org_name }}", "billing_email": "test@test.com", "admin_logins": [ "${{ github.event.issue.user.login }}" ] } }'
          